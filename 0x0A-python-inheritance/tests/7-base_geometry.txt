"""7-base_geometry Module Test"""

"""
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>>
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>>
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0
>>> try:
...     bg.integer_validator("name", 3.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer
>>> bg = BaseGeometry("leo")
Traceback (most recent call last):
...
TypeError: BaseGeometry() takes no arguments
>>> bg = BaseGeometry(23)
Traceback (most recent call last):
...
TypeError: BaseGeometry() takes no arguments
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.__doc__
'\n    BaseGeometry class\n    '
>>> bg.integer_validator.__doc__
'\n        integer_validator function\n        '
>>> BaseGeometry.__doc__
'\n    BaseGeometry class\n    '
>>> bg.area.__doc__
'\n        area function\n        '
>>> __import__('7-base_geometry').__doc__
'\n6-base_geometry Module\ncontains BaseGeometry class\nwith its methods and attributes\n'
>>>
"""
